<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jdk新特性 on 喜欢养狗,不爱洗头!</title>
    <link>https://hdorr.github.io/tags/jdk%E6%96%B0%E7%89%B9%E6%80%A7/</link>
    <description>Recent content in jdk新特性 on 喜欢养狗,不爱洗头!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>All rights reserved - 2018</copyright>
    <lastBuildDate>Sat, 27 Jul 2019 17:02:37 +0800</lastBuildDate>
    
	<atom:link href="https://hdorr.github.io/tags/jdk%E6%96%B0%E7%89%B9%E6%80%A7/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1.8新特性-1函数式接口</title>
      <link>https://hdorr.github.io/post/java%E5%9F%BA%E7%A1%80/java%E9%AB%98%E7%BA%A7/07jdk1.8%E6%96%B0%E7%89%B9%E6%80%A7/1.8%E6%96%B0%E7%89%B9%E6%80%A7-1%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Sat, 27 Jul 2019 17:02:37 +0800</pubDate>
      
      <guid>https://hdorr.github.io/post/java%E5%9F%BA%E7%A1%80/java%E9%AB%98%E7%BA%A7/07jdk1.8%E6%96%B0%E7%89%B9%E6%80%A7/1.8%E6%96%B0%E7%89%B9%E6%80%A7-1%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</guid>
      <description>主要内容
 自定义函数式接口
 函数式编程
 常用函数式接口
  1.函数式接口 概念 函数式接口在Java中是指：有且仅有一个抽象方法的接口。
函数式接口，即适用于函数式编程场景的接口。而Java中的函数式编程体现就是Lambda，所以函数式接口就是可
以适用于Lambda使用的接口。只有确保接口中有且仅有一个抽象方法，Java中的Lambda才能顺利地进行推导。
备注：“**语法糖**”是指使用更加方便，但是原理不变的代码语法。例如在遍历集合时使用的for-each语法，其实底层的实现原理仍然是迭代器，这便是“语法糖”。从应用层面来讲，Java中的Lambda可以被当做是匿名内部 类的“语法糖”，但是二者在原理上是不同的。
格式 只要确保接口中有且仅有一个抽象方法即可：
修饰符 interface 接口名称 { public abstract 返回值类型 方法名称(可选参数信息); // 其他非抽象方法内容 }  由于接口当中抽象方法的 public abstract 是可以省略的，所以定义一个函数式接口很简单：
public interface MyFunctionalInterface { void myMethod(); }  @FunctionalInterface 与 @Override 注解的作用类似，Java 8中专门为函数式接口引入了一个新的注解： @FunctionalInterface 。该注
解可用于一个接口的定义上：
@FunctionalInterface public interface MyFunctionalInterface { void myMethod(); }  @Override检查方法是否为重写的方法,是:编译成功,否:编译失败
一旦使用该注解来定义接口，编译器将会强制检查该接口是否确实有且仅有一个抽象方法，否则将会报错。需要注
意的是，即使不使用该注解，只要满足函数式接口的定义，这仍然是一个函数式接口，使用起来都一样。
2.函数式编程 在兼顾面向对象特性的基础上，Java语言通过Lambda表达式与方法引用等，为开发者打开了函数式编程的大门。
下面我们做一个初探。
Lambda的延迟执行 有些场景的代码执行后，结果不一定会被使用，从而造成性能浪费。而Lambda表达式是延迟执行的，这正好可以
作为解决方案，提升性能。
public class Demo01Logger { private static void log(int level, String msg) { if (level == 1) { System.</description>
    </item>
    
    <item>
      <title>1.8新特性-2Lambda表达式</title>
      <link>https://hdorr.github.io/post/java%E5%9F%BA%E7%A1%80/java%E9%AB%98%E7%BA%A7/07jdk1.8%E6%96%B0%E7%89%B9%E6%80%A7/1.8%E6%96%B0%E7%89%B9%E6%80%A7-2lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Sat, 27 Jul 2019 17:02:37 +0800</pubDate>
      
      <guid>https://hdorr.github.io/post/java%E5%9F%BA%E7%A1%80/java%E9%AB%98%E7%BA%A7/07jdk1.8%E6%96%B0%E7%89%B9%E6%80%A7/1.8%E6%96%B0%E7%89%B9%E6%80%A7-2lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>第三章 Lambda表达式 1.1 函数式编程思想概述 在数学中，函数就是有输入量、输出量的一套计算方案，也就是“拿什么东西做什么事情”。相对而言，面向对象过分强调“必须通过对象的形式来做事情”，而函数式思想则尽量忽略面向对象的复杂语法——强调做什么，而不是以什么形式做。
面向对象的思想:
做一件事情,找一个能解决这个事情的对象,调用对象的方法,完成事情.
函数式编程思想:
只要能获取到结果,谁去做的,怎么做的都不重要,重视的是结果,不重视过程
1.2 冗余的Runnable代码 传统写法
当需要启动一个线程去完成任务时，通常会通过 java.lang.Runnable 接口来定义任务内容，并使用
java.lang.Thread 类来启动该线程。代码如下：
public class Demo01Runnable { public static void main(String[] args) { // 匿名内部类 Runnable task = new Runnable() { @Override public void run() { // 覆盖重写抽象方法 System.out.println(&amp;quot;多线程任务执行！&amp;quot;); } }; new Thread(task).start(); // 启动线程 } }  本着“一切皆对象”的思想，这种做法是无可厚非的：首先创建一个 Runnable 接口的匿名内部类对象来指定任务内容，再将其交给一个线程来启动。
代码分析
对于 Runnable 的匿名内部类用法，可以分析出几点内容：
 Thread 类需要 Runnable 接口作为参数，其中的抽象 run 方法是用来指定线程任务内容的核心；
 为了指定 run 的方法体，不得不需要 Runnable 接口的实现类；</description>
    </item>
    
    <item>
      <title>1.8新特性-3Stream流</title>
      <link>https://hdorr.github.io/post/java%E5%9F%BA%E7%A1%80/java%E9%AB%98%E7%BA%A7/07jdk1.8%E6%96%B0%E7%89%B9%E6%80%A7/1.8%E6%96%B0%E7%89%B9%E6%80%A7-3stream%E6%B5%81/</link>
      <pubDate>Sat, 27 Jul 2019 17:02:37 +0800</pubDate>
      
      <guid>https://hdorr.github.io/post/java%E5%9F%BA%E7%A1%80/java%E9%AB%98%E7%BA%A7/07jdk1.8%E6%96%B0%E7%89%B9%E6%80%A7/1.8%E6%96%B0%E7%89%B9%E6%80%A7-3stream%E6%B5%81/</guid>
      <description>Stream流 说到Stream便容易想到I/O Stream，而实际上，谁规定“流”就一定是“IO流”呢？在Java 8中，得益于Lambda所带
来的函数式编程，引入了一个全新的Stream概念，用于解决已有集合类库既有的弊端。
引言 传统集合的多步遍历代码
几乎所有的集合（如 Collection 接口或 Map 接口等）都支持直接或间接的遍历操作。而当我们需要对集合中的元
素进行操作的时候，除了必需的添加、删除、获取外，最典型的就是集合遍历。例如：
import java.util.ArrayList; import java.util.List; public class Demo01ForEach { public static void main(String[] args) { List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); list.add(&amp;quot;张无忌&amp;quot;); list.add(&amp;quot;周芷若&amp;quot;); list.add(&amp;quot;赵敏&amp;quot;); list.add(&amp;quot;张强&amp;quot;); list.add(&amp;quot;张三丰&amp;quot;); for (String name : list) { System.out.println(name); } } }  这是一段非常简单的集合遍历操作：对集合中的每一个字符串都进行打印输出操作。
循环遍历的弊端
Java 8的Lambda让我们可以更加专注于做什么（What），而不是怎么做（How），这点此前已经结合内部类进行
了对比说明。现在，我们仔细体会一下上例代码，可以发现：
 for循环的语法就是“怎么做”
 for循环的循环体才是“做什么”
  为什么使用循环？因为要进行遍历。但循环是遍历的唯一方式吗？遍历是指每一个元素逐一进行处理，而并不是从
第一个到最后一个顺次处理的循环。前者是目的，后者是方式。
试想一下，如果希望对集合中的元素进行筛选过滤：
 将集合A根据条件一过滤为子集B；
 然后再根据条件二过滤为子集C。
  那怎么办？在Java 8之前的做法可能为：</description>
    </item>
    
  </channel>
</rss>