<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cms-前端 on I am thinking ...</title>
    <link>https://hdorr.github.io/tags/cms-%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in cms-前端 on I am thinking ...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>All rights reserved - 2018</copyright>
    <lastBuildDate>Sat, 27 Jul 2019 17:02:37 +0800</lastBuildDate>
    
	<atom:link href="https://hdorr.github.io/tags/cms-%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>cms01-前端-page_List页面编写与整合后端运行</title>
      <link>https://hdorr.github.io/post/%E9%A1%B9%E7%9B%AE/cms/%E5%89%8D%E7%AB%AF/cms01-%E5%89%8D%E7%AB%AF-page_list%E5%BC%80%E5%8F%91%E4%B8%8E%E8%B0%83%E8%AF%95/</link>
      <pubDate>Sat, 27 Jul 2019 17:02:37 +0800</pubDate>
      
      <guid>https://hdorr.github.io/post/%E9%A1%B9%E7%9B%AE/cms/%E5%89%8D%E7%AB%AF/cms01-%E5%89%8D%E7%AB%AF-page_list%E5%BC%80%E5%8F%91%E4%B8%8E%E8%B0%83%E8%AF%95/</guid>
      <description>在module中创建CMS页面原型 定义cms目录,创建相应接口
在page目录中创建page_list页面
在router页面中创建index.js路由组件
import Home from &#39;@/module/home/page/home.vue&#39;; import page_list from &amp;quot;../page/page_list&amp;quot;; export default [{ path: &#39;/&#39;, component: Home, name: &#39;CMS&#39;, hidden: false, children:[ {path: &#39;/cms/page/list&#39;,name:&#39;页面列表&#39;,component: page_list } ] } ]  这样在home组件中,就可以获取到路与信息,并渲染成树状列表显示
仿照home路由组件,创建cms路由默认显示,并且设置管理页面的子路由 在base工程中合并路由组件
import Vue from &#39;vue&#39;; import Router from &#39;vue-router&#39;; Vue.use(Router); // 定义路由配置 let routes = [] let concat = (router) =&amp;gt; { routes = routes.concat(router) } // // 导入路由规则 import HomeRouter from &#39;@/module/home/router&#39; import CmsRouter from &#39;@/module/cms/router&#39; // 合并路由规则 concat(HomeRouter) concat(CmsRouter) export default routes;  开发page_list.</description>
    </item>
    
    <item>
      <title>cms02-前端-page_add开发与调试 </title>
      <link>https://hdorr.github.io/post/%E9%A1%B9%E7%9B%AE/cms/%E5%89%8D%E7%AB%AF/cms02-%E5%89%8D%E7%AB%AF-page_add%E5%BC%80%E5%8F%91%E4%B8%8E%E8%B0%83%E8%AF%95-/</link>
      <pubDate>Sat, 27 Jul 2019 17:02:37 +0800</pubDate>
      
      <guid>https://hdorr.github.io/post/%E9%A1%B9%E7%9B%AE/cms/%E5%89%8D%E7%AB%AF/cms02-%E5%89%8D%E7%AB%AF-page_add%E5%BC%80%E5%8F%91%E4%B8%8E%E8%B0%83%E8%AF%95-/</guid>
      <description>创建组件 页面效果 ​ 创建page_add.vue页面 配置路由 在cms模块的路由文件中配置“添加页面”的路由：
{path:&#39;/cms/page/add&#39;,name:&#39;新增页面&#39;,component: page_add,hidden:true}  注意：由于“添加页面”不需要显示为一个菜单，这里hidden设置为true隐藏菜单。 测试，在浏览器地址栏输入http://localhost:11000/#/cms/page/add
在页面列表添加“添加页面”的按钮 实际情况是用户进入页面查询列表，点击“新增页面”按钮进入新增页面窗口。 在查询按钮的旁边添加：
&amp;lt;router-link :to=&amp;quot;{path:&#39;/cms/page/add&#39;}&amp;quot; &amp;gt; &amp;lt;el-button type=&amp;quot;primary&amp;quot; size=&amp;quot;small&amp;quot;&amp;gt;新增页面&amp;lt;/el-button&amp;gt; &amp;lt;/router-link&amp;gt;  :to为点击后跳转到相应路由
说明：router-link是vue提供的路由功能，用于在页面生成路由链接，最终在html渲染后就是标签。
page_add页面 &amp;lt;!-- pageForm就是page绑定的数据对象的名称--&amp;gt; &amp;lt;el-form :model=&amp;quot;pageForm&amp;quot; label-width=&amp;quot;80px&amp;quot; &amp;gt; &amp;lt;el-form-item label=&amp;quot;所属站点&amp;quot; prop=&amp;quot;siteId&amp;quot;&amp;gt; &amp;lt;el-select v-model=&amp;quot;pageForm.siteId&amp;quot; placeholder=&amp;quot;请选择站点&amp;quot;&amp;gt; &amp;lt;el-option v-for=&amp;quot;item in siteList&amp;quot; :key=&amp;quot;item.siteId&amp;quot; :label=&amp;quot;item.siteName&amp;quot; :value=&amp;quot;item.siteId&amp;quot;&amp;gt; &amp;lt;/el-option&amp;gt; &amp;lt;/el-select&amp;gt; &amp;lt;/el-form-item&amp;gt; &amp;lt;el-form-item label=&amp;quot;选择模板&amp;quot; prop=&amp;quot;templateId&amp;quot;&amp;gt; &amp;lt;el-select v-model=&amp;quot;pageForm.templateId&amp;quot; placeholder=&amp;quot;请选择模板&amp;quot;&amp;gt; &amp;lt;el-option v-for=&amp;quot;item in templateList&amp;quot; :key=&amp;quot;item.templateId&amp;quot; :label=&amp;quot;item.templateName&amp;quot; :value=&amp;quot;item.templateId&amp;quot;&amp;gt; &amp;lt;/el-option&amp;gt; &amp;lt;/el-select&amp;gt; &amp;lt;/el-form-item&amp;gt; &amp;lt;el-form-item label=&amp;quot;页面名称&amp;quot; prop=&amp;quot;pageName&amp;quot;&amp;gt; &amp;lt;el-input v-model=&amp;quot;pageForm.pageName&amp;quot; auto-complete=&amp;quot;off&amp;quot; &amp;gt;&amp;lt;/el-input&amp;gt; &amp;lt;/el-form-item&amp;gt; &amp;lt;el-form-item label=&amp;quot;别名&amp;quot; prop=&amp;quot;pageAliase&amp;quot;&amp;gt; &amp;lt;el-input v-model=&amp;quot;pageForm.</description>
    </item>
    
    <item>
      <title>cms03-前端-page_edit开发与调试  </title>
      <link>https://hdorr.github.io/post/%E9%A1%B9%E7%9B%AE/cms/%E5%89%8D%E7%AB%AF/cms03-%E5%89%8D%E7%AB%AF-page_edit%E5%BC%80%E5%8F%91%E4%B8%8E%E8%B0%83%E8%AF%95-/</link>
      <pubDate>Sat, 27 Jul 2019 17:02:37 +0800</pubDate>
      
      <guid>https://hdorr.github.io/post/%E9%A1%B9%E7%9B%AE/cms/%E5%89%8D%E7%AB%AF/cms03-%E5%89%8D%E7%AB%AF-page_edit%E5%BC%80%E5%8F%91%E4%B8%8E%E8%B0%83%E8%AF%95-/</guid>
      <description>修改页面前端开发 修改页面用户操作流程：
1、用户进入修改页面，在页面上显示了修改页面的信息
2、用户修改页面的内容，点击“提交”，提示“修改成功”或“修改失败”
页面处理流程 页面的处理流程如下：
1、进入页面，通过钩子方法请求服务端获取页面信息，并赋值给数据模型对象
2、页面信息通过数据绑定在表单显示
3、用户修改信息点击“提交”请求服务端修改页面信息接口
编写page_edit页面 修改页面的布局同添加页面，可以直接复制添加页面，在添加页面基础上修改。
下边编写页面内容：
1、编写page_edit.vue
页面布局同添加页面，略。
2、配置路由
进入修改页面传入pageId
import page_edit from &#39;@/module/cms/page/page_edit.vue&#39;; { path: &#39;/cms/page/edit/:pageId&#39;, name:&#39;修改页面&#39;,component: page_edit,hidden:true},  3、在页面列表添加“编辑”链接 参考table组件的例子，在page_list.vue上添加“操作”列
&amp;lt;!-- 操作列,跳转到修改界面--&amp;gt; &amp;lt;el-table-column label=&amp;quot;操作&amp;quot; width=&amp;quot;80&amp;quot;&amp;gt; &amp;lt;!--slot-scope:插槽,取得当前行数据,命名为page 拿到行数据,从行中取出pageid--&amp;gt; &amp;lt;template slot-scope=&amp;quot;page&amp;quot;&amp;gt; &amp;lt;el-button size=&amp;quot;small&amp;quot;type=&amp;quot;text&amp;quot; @click=&amp;quot;edit(page.row.pageId)&amp;quot;&amp;gt;编辑 &amp;lt;/template&amp;gt; &amp;lt;/el-table-column&amp;gt;  编写edit方法
//路由跳转 edit:function (pageId) { //打开修改页面 this.$router.push({ path:&#39;/cms/page/edit/&#39;+pageId, }) },  页面内容显示 本功能实现：进入修改页面立即显示要修改的页面信息。
1、定义api方法
export const page_get=(id) =&amp;gt; { //定义方法,请求服务端站点根据id查询接口,返回结果 return http.requestQuickGet(apiUrl + &#39;/cms/page/get/&#39; +id); } export const page_edit=(id,params) =&amp;gt; { //定义方法,请求服务端站点修改页面接口,返回结果 return http.</description>
    </item>
    
    <item>
      <title>cms04-前端-删除页面开发与调试 </title>
      <link>https://hdorr.github.io/post/%E9%A1%B9%E7%9B%AE/cms/%E5%89%8D%E7%AB%AF/cms04-%E5%89%8D%E7%AB%AF-%E5%88%A0%E9%99%A4%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%E4%B8%8E%E8%B0%83%E8%AF%95/</link>
      <pubDate>Sat, 27 Jul 2019 17:02:37 +0800</pubDate>
      
      <guid>https://hdorr.github.io/post/%E9%A1%B9%E7%9B%AE/cms/%E5%89%8D%E7%AB%AF/cms04-%E5%89%8D%E7%AB%AF-%E5%88%A0%E9%99%A4%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%E4%B8%8E%E8%B0%83%E8%AF%95/</guid>
      <description> 删除页面前端开发 Api方法 /*页面删除*/ export const page_del = id =&amp;gt; { return http.requestDelete(apiUrl+&#39;/cms/page/del/&#39;+id) }  编写页面 1、在page_list.vue页面添加删除按钮
&amp;lt;el-table-column label=&amp;quot;操作&amp;quot; width=&amp;quot;80&amp;quot;&amp;gt; &amp;lt;!--slot-scope:插槽,取得当前行数据,命名为page 拿到行数据,从行中取出pageid--&amp;gt; &amp;lt;template slot-scope=&amp;quot;page&amp;quot;&amp;gt; &amp;lt;el-button size=&amp;quot;small&amp;quot;type=&amp;quot;text&amp;quot; @click=&amp;quot;edit(page.row.pageId)&amp;quot;&amp;gt;编辑 &amp;lt;/el-button&amp;gt; &amp;lt;el-button size=&amp;quot;small&amp;quot;type=&amp;quot;text&amp;quot; @click=&amp;quot;del(page.row.pageId)&amp;quot;&amp;gt;删除 &amp;lt;/el-button&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;/el-table-column&amp;gt;  在原来,修改页面按钮的插槽中直接再加一个按钮
删除事件 del:function (pageId) { //调用接口 this.$confirm(&#39;确认删除吗？&#39;, &#39;提示&#39;, {}).then(() =&amp;gt; { cmsApi.page_del(pageId).then(res=&amp;gt;{ if (res.success) { this.$message.success(&amp;quot;删除成功&amp;quot;) //刷新页面 this.query() }else { this.$message.success(&amp;quot;删除失败&amp;quot;) } }); }) } },  </description>
    </item>
    
  </channel>
</rss>